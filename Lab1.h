#ifndef LAB1_H
#define LAB1_H

#include <iostream>
#include <limits>
#include <iomanip>

using namespace std;

extern const int NMsgs;

namespace Lab1 {

	/****************************************************************************************/
	/*		    	Необходимые структуры для описания сильно разряженной матрицы			*/
	/****************************************************************************************/

	// Структура "не пустой" строки матрицы (т. е. в которой есть хотя бы один не нулевой элемент), в которой хранятся только не нулевые элементы этой строки
	struct RowOfSparseMatrix {
		int val;						// Значение элемента
		int j;							// j-тый индекс элемента (номер столбца)
		RowOfSparseMatrix* next;		// Указатель на следующий не нулевой элемент данной строки
	};


	/* Структура списка строк матрицы */
	struct SparseMatrixRowList {
		int i;							// Номер текущей строки
		SparseMatrixRowList* next;		// Указатель на следующую ненулевую строку
		RowOfSparseMatrix* row;			// Указатель на ненулевые элементы данной строки
	};


	/* Структура сильно разряженной матрицы - хранит размер матрицы и указатель на список строк */
	struct SparseMatrix {
		int m;							// Кол-во строк матрицы
		int n;							// Кол-во столбцов матрицы
		SparseMatrixRowList* Rowlist;	// Указатель на список не пустых строк
	};

	/****************************************************************************************/
	/*								Прототипы функций										*/
	/****************************************************************************************/

	int getInt(int&);								// Функция ввода целого числа (1 в случае неудачи, и 0 при успехе)
	void Input(SparseMatrix&);						// Ввод размера матрицы
	int dialog(const char* msgs[], int N);			// Организация диалога
	int D_Add(SparseMatrix&);						// Диалоговая функция добавления ненулевого элемента в матрицу
	void AddNewRow(SparseMatrix&, int, int, int);	// Функция добавления новой строки-списка в матрицу по возрастанию
	void AddToRow(RowOfSparseMatrix*&, int, int);	// Функция добавления нового не нулевого элемента в строку-список по возрастанию
	void print(SparseMatrix&);						// Вывод одной матрицы
	int D_Show(SparseMatrix&);						// Функция вывода матриц
	SparseMatrix* CreateNewMatrix(SparseMatrix&);	// Функция создания новой матрицы
	void Delete(SparseMatrix&);						// Функция удаления матрицы
	void findMin(RowOfSparseMatrix*, int&, int&);	// Поиск минимального элемента в строке



}

#endif // HEADER_LAB1_H

